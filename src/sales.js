// MODULES
const c = global.chalk;
const clone = global.clone;
const fetch = global.fetch;
const log = global.log;
const parseDOM = global.DOMParser;
const { load, updateFile, getConst } = global.storage;

// CONSTANTS
const goodsfilePath = 'data/configs/delivery.json';
const settings = global.settings;
let goods = []; // Initialize as empty array
let backupOrders = [];

// Flag to prevent concurrent execution of checkForNewOrders
let isCheckingOrders = false;

// Log the current state of backupOrders for debugging
log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è sales.js, backupOrders.length: ${backupOrders.length}`, 'c');

// Store for scheduled follow-up messages
const followUpMessages = new Map();

// Function to enable auto-issue functionality
function enableAutoIssue() {
    log(`–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞.`, 'g');
    // Initialize backupOrders with current orders to establish baseline
    getOrders().then(orders => {
        backupOrders = clone(orders);
        log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω backupOrders —Å ${backupOrders.length} –∑–∞–∫–∞–∑–∞–º–∏`, 'c');
        if (backupOrders.length > 0) {
            log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ backupOrders: ${backupOrders[0].id}, —Å—Ç–∞—Ç—É—Å: ${backupOrders[0].status}`, 'c');
        }
    }).catch(err => {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ backupOrders: ${err}`, 'r');
    });
}

// Function to clear all scheduled follow-up messages
function clearFollowUpMessages() {
    for(const [orderId, scheduledMessage] of followUpMessages.entries()) {
        clearTimeout(scheduledMessage.timeoutId);
    }
    followUpMessages.clear();
    log('–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', 'c');
}

// Function to send follow-up message
async function sendFollowUpMessage(order) {
    try {
        log(`sendFollowUpMessage –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: ${JSON.stringify(order)}`, 'c');
        
        // Check if follow-up messages are enabled
        if (!settings.followUpMessage) {
            log(`Follow-up —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`, 'c');
            return false;
        }
        
        // Use customizable message text from settings, with fallback to default
        let message = settings.followUpMessageText || '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!üåü\n–ü–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ø–æ–∫—É–ø–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑" –ø–æ —Å—Å—ã–ª–∫–µ https://funpay.com/orders/{order_id}/';
        
        // Replace the order ID placeholder
        message = message.replace('{order_id}', order.id.replace('#', ''));
        
        // Replace \n with actual newline character
        message = message.replace(/\\n/g, '\n');
        
        // Properly escape quotes and other special characters for JSON
        message = message.replace(/"/g, '\\"');
        
        log(`–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${message}`, 'c');
        
        // Use true for customNode to properly format the node
        const result = await global.chat.sendMessage(order.buyerId, message, true, 'auto');
        
        log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify(result)}`, 'c');
        
        if(result) {
            log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${c.yellowBright(order.buyerName)} –ø–æ –∑–∞–∫–∞–∑—É ${c.yellowBright(order.id)}`);
            
            // Remove from scheduled messages
            followUpMessages.delete(order.id);
            return true;
        } else {
            log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${order.buyerName} –ø–æ –∑–∞–∫–∞–∑—É ${order.id}`, 'r');
            return false;
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è: ${err}`, 'r');
        return false;
    }
}

async function checkForNewOrders() {
    // Prevent concurrent execution
    if (isCheckingOrders) {
        log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–∑–æ–≤`, 'c');
        return;
    }
    
    isCheckingOrders = true;
    
    try {
        log(`–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, backupOrders.length: ${backupOrders.length}`, 'c');
        if (backupOrders.length > 0) {
            log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ backupOrders: ${backupOrders[0].id}, —Å—Ç–∞—Ç—É—Å: ${backupOrders[0].status}`, 'c');
        }
        
        // Load goods data
        goods = await load(goodsfilePath);
        
        let orders = [];

        log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...`, 'c');
        orders = await getNewOrders(backupOrders);
        
        log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: newOrders.length: ${orders.newOrders.length}, backupOrders.length: ${orders.backupOrders.length}`, 'c');
        if (orders.backupOrders.length > 0) {
            log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: ${orders.backupOrders[0].id}, —Å—Ç–∞—Ç—É—Å: ${orders.backupOrders[0].status}`, 'c');
        }

        if(!orders || orders.newOrders.length == 0) {
            log(`–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.`, 'c');
            isCheckingOrders = false;
            return;
        }

        for(let i = 0; i < orders.newOrders.length; i++) {
            const order = orders.newOrders[i];

            if(!order) {
                log('!order', 'c');
                isCheckingOrders = false;
                return;
            }

            log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ${c.yellowBright(order.id)} –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ${c.yellowBright(order.buyerName)} –Ω–∞ —Å—É–º–º—É ${c.yellowBright(order.price)} ‚ÇΩ.`, 'g');
            
            // Always send Telegram notification immediately when a new order is detected
            if(global.telegramBot && settings.newOrderNotification) {
                try {
                    const notificationResult = await global.telegramBot.sendNewOrderNotification(order);
                    if (notificationResult) {
                        log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ ${c.yellowBright(order.id)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`, 'g');
                    } else {
                        log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ ${c.yellowBright(order.id)} –≤ Telegram`, 'r');
                    }
                } catch (error) {
                    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: ${error}`, 'r');
                }
            } else if (global.telegramBot) {
                log(`Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`, 'c');
            } else {
                log(`Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`, 'c');
            }
    
            log(`–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${c.yellowBright(order.id)} –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ${c.yellowBright(order.buyerName)} –Ω–∞ —Å—É–º–º—É ${c.yellowBright(order.price)} ‚ÇΩ.`);

            // Schedule follow-up message for 5 minutes later (as requested)
            if(settings.followUpMessage) {
                log(`–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${c.yellowBright(order.id)} —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç`, 'c');
                
                // Schedule for 5 minutes later
                const timeoutId = setTimeout(() => {
                    sendFollowUpMessage(order);
                }, 300000); // 5 minutes (300000 ms)
                
                // Store the timeout ID so we can cancel if needed
                followUpMessages.set(order.id, {
                    timeoutId: timeoutId,
                    order: order
                });
            } else {
                log(`Follow-up —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`, 'c');
            }

            for(let j = 0; j < order.count; j++) {
                await issueGood(order.buyerId, order.buyerName, order.name, 'id');
            }
        }
        
        backupOrders = clone(orders.backupOrders);
        log(`backupOrders –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${backupOrders.length}`, 'c');
        if (backupOrders.length > 0) {
            log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º backupOrders: ${backupOrders[0].id}, —Å—Ç–∞—Ç—É—Å: ${backupOrders[0].status}`, 'c');
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ: ${err}`, 'r');
    } finally {
        // Always reset the flag when done
        isCheckingOrders = false;
    }
}

async function issueGood(buyerIdOrNode, buyerName, goodName, type = 'id') {
    let result = false;

    try {
        goods = await load(goodsfilePath);
        let message = "";
        
        for(let i = 0; i < goods.length; i++) {
            if(goodName.includes(goods[i].name)) {
                if(goods[i].message != undefined) {
                    message = goods[i].message;
                    break;
                } 
                else
                if(goods[i].nodes != undefined) {
                    let notInStock = true;

                    for(let j = 0; j < goods[i].nodes.length; j++) {
                        const node = goods[i].nodes[j];
    
                        goods[i].nodes.shift();
                        await updateFile(goods, goodsfilePath);
                        message = node;
                        notInStock = false;
                        break;
                    }

                    if(notInStock) {
                        log(`–ü–æ—Ö–æ–∂–µ, —Ç–æ–≤–∞—Ä "${goodName}" –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤—ã–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.`);
                        return 'notInStock';
                    }
                }
            }
        }

        if(message != "") {
            let node = buyerIdOrNode;
            let customNode = false;

            if(type == 'id') {
                customNode = true;
            }
            
            result = await global.chat.sendMessage(node, message, customNode, 'auto');
            
            if(result) {
                log(`–¢–æ–≤–∞—Ä "${c.yellowBright(goodName)}" –≤—ã–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${c.yellowBright(buyerName)} —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:`);
                log(message);

                if(global.telegramBot && settings.deliveryNotification) {
                    global.telegramBot.sendDeliveryNotification(buyerName, goodName, message, node);
                }
                
                // Update account status in Google Sheets if the feature is enabled
                if (global.googleSheetsFAQ && global.settings.googleSheetsAccountsSheetName) {
                    try {
                        // Extract game and parameters from the good name
                        // Try to parse structured descriptions like "Game - Parameters" or "Game, Parameters"
                        let game = goodName;
                        let parameters = goodName;
                        
                        // Try to extract game name from description
                        const separators = [' - ', ' ‚Äì ', ', ', ': '];
                        for (const separator of separators) {
                            if (goodName.includes(separator)) {
                                const parts = goodName.split(separator);
                                if (parts.length >= 2) {
                                    game = parts[0].trim();
                                    parameters = goodName; // Keep full name as parameters
                                    break;
                                }
                            }
                        }
                        
                        log(`Updating account status in Google Sheets for: ${game}, ${parameters}`, 'c');
                        await global.googleSheetsFAQ.updateAccountStatus(game, parameters, 'Sold');
                    } catch (err) {
                        log(`Error updating account status in Google Sheets: ${err}`, 'r');
                    }
                }

            } else {
                log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä "${goodName}" –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${buyerName}.`, 'r');
            }
        } else {
            log(`–¢–æ–≤–∞—Ä–∞ "${c.yellowBright(goodName)}" –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏, –ø—Ä–æ–ø—É—Å–∫–∞—é.`, 'y');
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞: ${err}`, 'r');
    }

    return result;
}

async function getGood(orderName) {
    let result = false;
    try {
        goods = await load(goodsfilePath);
    
        for(let i = 0; i < goods.length; i++) {
            if(orderName == goods[i].name) {
                result = goods[i];
                break;
            }
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–∏–∫—É: ${err}`, 'r');
    }

    return result;
}

async function addDeliveredName(orderName, name, orderId) {
    try {
        goods = await load(goodsfilePath);
        
        for(let i = 0; i < goods.length; i++) {
            if(orderName === goods[i].name) {
                if(goods[i].delivered == undefined) {
                    goods[i].delivered = [];
                }

                goods[i].delivered.push({
                    name: name, order: orderId
                });
                await updateFile(goods, goodsfilePath);
                break;
            }
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö –Ω–∏–∫–æ–≤ –∫ –∑–∞–∫–∞–∑—É: ${err}`, 'r');
    }
}

async function searchOrdersByUserName(userName) {
    let result = [];
    try {
        goods = await load(goodsfilePath);
    
        const orders = await getOrders();
    
        for(let i = 0; i < orders.length; i++) {
            if (orders[i].buyerName == userName) {
                result[result.length] = orders[i];
            }
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–∏–∫—É: ${err}`, 'r');
    }

    return result;
}

async function getNewOrders(lastOrders) {
    log(`getNewOrders –≤—ã–∑–≤–∞–Ω —Å lastOrders.length: ${lastOrders ? lastOrders.length : 0}`, 'c');
    if (lastOrders && lastOrders.length > 0) {
        log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ lastOrders: ${lastOrders[0].id}, —Å—Ç–∞—Ç—É—Å: ${lastOrders[0].status}`, 'c');
    }
    
    // If this is the first run (no previous orders), get current orders and use them as baseline
    if(!lastOrders || !lastOrders[0]) {
        log(`–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑–∞–º –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∫–∞–∫ –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫`);
        try {
            const orders = await getOrders();
            if(!orders || !orders[0]) {
                log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.`, 'r');
                return {newOrders: [], backupOrders: []};
            }
            // On first run, we don't have any "new" orders, just a baseline
            log(`–ü–æ–ª—É—á–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫`);
            if (orders.length > 0) {
                log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${orders[0].id}, —Å—Ç–∞—Ç—É—Å: ${orders[0].status}`, 'c');
            }
            return {newOrders: [], backupOrders: orders};
        } catch(err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${err}`, 'r');
            return {newOrders: [], backupOrders: []};
        }
    }

    let result = [];
    let orders = [];

    try {
        orders = await getOrders();
        if(!orders || !orders[0]) {
            log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.`, 'r');
            return {newOrders: [], backupOrders: []};
        }

        log(`–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ${orders.length} —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —Å ${lastOrders.length} –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏`, 'c');
        if (orders.length > 0) {
            log(`–ü–µ—Ä–≤—ã–π —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑: ${orders[0].id}, —Å—Ç–∞—Ç—É—Å: ${orders[0].status}`, 'c');
        }

        // Check for completely new orders (orders with IDs not seen before)
        for(let i = 0; i < orders.length; i++) {
            if(result.length >= 3) break;
            let contains = false;

            for(let j = 0; j < lastOrders.length; j++) {
                if(orders[i].id == lastOrders[j].id) {
                    contains = true;
                    break;
                }
            }

            if(contains == false) {
                result.push(Object.assign(orders[i]));
                log(`–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: ${orders[i].id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${orders[i].status}`, 'c');
            }
        }
        
        // Also check for status changes in existing orders that might be relevant
        for(let i = 0; i < orders.length; i++) {
            for(let j = 0; j < lastOrders.length; j++) {
                if(orders[i].id == lastOrders[j].id) {
                    // If order status changed in a way that might be significant, treat as new
                    // Specifically, look for orders that became "–û–ø–ª–∞—á–µ–Ω" (regardless of previous status)
                    if(orders[i].status == "–û–ø–ª–∞—á–µ–Ω" && lastOrders[j].status != "–û–ø–ª–∞—á–µ–Ω") {
                        // Check if we've already added this order to result
                        let alreadyAdded = false;
                        for(let k = 0; k < result.length; k++) {
                            if(result[k].id == orders[i].id) {
                                alreadyAdded = true;
                                break;
                            }
                        }
                        
                        if(!alreadyAdded) {
                            result.push(Object.assign(orders[i]));
                            log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orders[i].id} –Ω–∞ "–û–ø–ª–∞—á–µ–Ω"`, 'c');
                        }
                    }
                    break;
                }
            }
        }
        
        // Additionally, check if any "–û–ø–ª–∞—á–µ–Ω" orders in the current fetch were not in the previous fetch
        // This handles the case where an order was already "–û–ø–ª–∞—á–µ–Ω" when first detected
        for(let i = 0; i < orders.length; i++) {
            if(orders[i].status == "–û–ø–ª–∞—á–µ–Ω") {
                let wasInPrevious = false;
                for(let j = 0; j < lastOrders.length; j++) {
                    if(orders[i].id == lastOrders[j].id) {
                        wasInPrevious = true;
                        break;
                    }
                }
                
                // If this "–û–ø–ª–∞—á–µ–Ω" order wasn't in the previous fetch at all, treat as significant
                if(!wasInPrevious) {
                    // Check if we've already added this order to result
                    let alreadyAdded = false;
                    for(let k = 0; k < result.length; k++) {
                        if(result[k].id == orders[i].id) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    
                    if(!alreadyAdded) {
                        result.push(Object.assign(orders[i]));
                        log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ${orders[i].id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–ø–ª–∞—á–µ–Ω"`, 'c');
                    }
                }
            }
        }
        
        log(`–í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${result.length}`, 'c');
        if (result.length > 0) {
            for(let i = 0; i < result.length; i++) {
                log(`–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${i+1}: ${result[i].id}, —Å—Ç–∞—Ç—É—Å: ${result[i].status}`, 'c');
            }
        }
        
        if (orders.length > 0) {
            log(`–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${orders[0].id}, —Å—Ç–∞—Ç—É—Å: ${orders[0].status}`, 'c');
        }
    } catch(err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${err}`, 'r');
        return {newOrders: [], backupOrders: lastOrders}; // Keep previous orders on error
    }

    return {newOrders: result, backupOrders: orders};
}

async function getOrders() {
    let result = [];
    try {
        const url = `${getConst('api')}/orders/trade`;
        const headers = {
            "cookie": `golden_key=${settings.golden_key}`,
            "x-requested-with": "XMLHttpRequest"
        };

        const options = {
            method: 'POST',
            headers: headers
        }

        let resp = await fetch(url, options);
        
        const data = await resp.text();
        const doc = parseDOM(data);
        const ordersEl = doc.querySelectorAll(".tc-item");

        for(let i = 0; i < ordersEl.length; i++) {
            const order = ordersEl[i];
            const id = order.querySelector(".tc-order").innerHTML;
            const name = order.querySelector(".order-desc").querySelector('div').innerHTML;
            const buyerName = order.querySelector(".media-user-name > span").innerHTML;
            const buyerProfileLink = order.querySelector(".avatar-photo").getAttribute("data-href").split("/");
            const buyerId = buyerProfileLink[buyerProfileLink.length - 2];
            const status = order.querySelector(".tc-status").innerHTML;
            const price = Number(order.querySelector(".tc-price").firstChild.textContent);
            const unit = order.querySelector(".tc-price").querySelector("span").innerHTML;

            const sections = name.split(',');
            let count = 1;
            
            if(sections.length > 1) {
                const section = sections[sections.length - 1];
                if(section.includes('—à—Ç.')) {
                    count = Number(section.split('—à—Ç.')[0]);

                    if(!count || isNaN(count)) {
                        count = 1;
                    }
                }
            }

            result.push({
                id: id,
                name: name,
                buyerId: buyerId,
                buyerName: buyerName,
                status: status,
                price: price,
                unit: unit,
                count: count
            });
        }

        return result;
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–∞–∂: ${err}`, 'r');
    }
    return result;
}

async function getLotNames() {
    let result = [];
    try {
        const url = `${getConst('api')}/users/${global.appData.id}/`;
        const headers = {
            "cookie": `golden_key=${settings.golden_key}`
        };

        const options = {
            method: 'GET',
            headers: headers
        };

        let resp = await fetch(url, options);
        const data = await resp.text();
        const doc = parseDOM(data);
        const lotNamesEl = doc.querySelectorAll(".tc-desc-text");

        for(let i = 0; i < lotNamesEl.length; i++) {
            result.push(lotNamesEl[i].innerHTML);
        }

        return result;
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤: ${err}`, 'r');
    }
}

export { getOrders, getNewOrders, issueGood, getLotNames, searchOrdersByUserName, checkForNewOrders, getGood, addDeliveredName, enableAutoIssue, clearFollowUpMessages, sendFollowUpMessage };