const c = global.chalk;
const Telegraf = global.telegraf;
const Keyboard = global.telegram_keyboard;
const { setConst, load, updateFile, getConst } = global.storage;
const log = global.log;
const fs = global.fs_extra;

class TelegramBot {
    constructor(token) {
        this.bot = new Telegraf(token);
        this.pendingFeedbackAction = null; // Store pending feedback actions

        process.once('SIGINT', () => this.bot.stop('SIGINT'));
        process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
        this.bot.catch((err) => {
            log(`–û—à–∏–±–∫–∞ –±–æ—Ç–∞ telegram: ${err}`, 'r');
        })
    }

    async run() {
        try {
            this.setupListeners();
            await this.setupBot();

            this.bot.launch();
            log(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ telegram –±–æ—Ç–∞ ${c.yellowBright(this.botInfo.username)} –∑–∞–ø—É—â–µ–Ω–æ.`, 'g');
            
            // Log bot information for debugging
            log(`Telegram Bot Info: Username=${this.botInfo.username}, ID=${this.botInfo.id}`, 'c');
            if(global.storage && global.storage.getConst) {
                const chatId = global.storage.getConst('chatId');
                log(`Current Chat ID: ${chatId}`, 'c');
            }
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: ${error}`, 'r');
        }
    }

    async setupBot() {
        this.botInfo = await this.bot.telegram.getMe();
        this.bot.options.username = this.botInfo.username;

        this.mainKeyboard = this.getMainKeyboard();
        this.editGoodsKeyboard = this.getEditGoodsKeyboard();
        this.editAutoResponseKeyboard = this.getEditAutoResponseKeyboard();
        this.editSettingsKeyboard = this.getEditSettingsKeyboard();
        this.selectIssueTypeKeyboard = this.getSelectIssueTypeKeyboard();
        this.backKeyboard = this.getBackKeyboard();
        this.feedbackKeyboard = this.getFeedbackKeyboard(); // Add feedback keyboard

        this.waitingForLotDelete = false;
        this.waitingForLotName = false;
        this.waitingForLotContent = false;
        this.waitingForDeliveryFile = false;
        this.waitingForReply = false;
        this.waitingForAutoResponsePatterns = false;
        this.waitingForAutoResponseResponses = false;
        this.waitingForAutoResponseDelete = false;
        this.waitingForAutoResponseFile = false;
        this.waitingForSettingsFile = false;
        this.waitingForSettingValue = false;
        this.waitingForFeedbackAction = false; // Add feedback action flag

        this.lotType = '';
        this.lotName = '';
        this.lotContent = '';
        this.products = [];
        
        this.currentAutoResponse = {
            patterns: [],
            responses: []
        };
        
        // Store active conversations for reply functionality
        this.activeChats = new Map(); // Map: messageId -> {userName, node, time}
    }

    setupListeners() {
        this.bot.on('text', (ctx) => this.onMessage(ctx));
        this.bot.on('document', (ctx) => this.onMessage(ctx));
        this.bot.on('inline_query', (ctx) => this.onInlineQuery(ctx));
        this.bot.on('callback_query', (ctx) => this.onCallbackQuery(ctx));
    }
    
    async onMessage(ctx) {
        try {
            const msg = ctx.update.message.text;
            
            if(!this.isUserAuthed(ctx)) {
                ctx.reply('–ü—Ä–∏–≤–µ—Ç! üòÑ\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö FunPay Server, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.');
                return;
            }
    
            // Handle feedback actions
            if(this.waitingForFeedbackAction && msg && global.googleSheetsFAQ) {
                await this.handleFeedbackAction(ctx, msg);
                return;
            }
    
            if(msg == 'üî• –°—Ç–∞—Ç—É—Å üî•') {
                this.replyStatus(ctx);
                return;
            }
    
            if(msg == 'üöÄ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É üöÄ') {
                this.editAutoIssue(ctx);
                return;
            }

            if(msg == 'ü§ñ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ü§ñ') {
                await this.editAutoResponse(ctx);
                return;
            }

            if(msg == '‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è') {
                await this.editSettings(ctx);
                return;
            }

            if(msg == '‚ùî –ò–Ω—Ñ–æ ‚ùî') {
                this.getInfo(ctx);
                return;
            }

            if(msg == 'üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é üìä') {
                await this.manageFeedback(ctx);
                return;
            }

            if(msg == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã üìã') {
                await this.viewPendingResponses(ctx);
                return;
            }

            if(msg == '‚òëÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚òëÔ∏è') {
                this.addProduct(ctx);
                return;
            }

            if(msg == 'üìõ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üìõ') {
                this.removeProduct(ctx);
                return;
            }

            if(msg == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–≤—ã–¥–∞—á–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞)') {
                this.lotType = 'instruction';
                this.addProductName(ctx);
                return;
            }

            if(msg == '–ê–∫–∫–∞—É–Ω—Ç—ã (–≤—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏)') {
                this.lotType = 'accounts';
                this.addProductName(ctx);
                return;
            }

            if(msg == '‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ ‚¨áÔ∏è') {
                await this.getAutoIssueFile(ctx);
                return;
            }

            if(msg == '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ ‚¨ÜÔ∏è') {
                this.uploadAutoIssueFile(ctx);
                return;
            }

            // Auto-response editing buttons
            if(msg == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚ûï') {
                this.addAutoResponse(ctx);
                return;
            }

            if(msg == '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚ùå') {
                this.removeAutoResponse(ctx);
                return;
            }

            if(msg == 'üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã üìÑ') {
                await this.viewAllAutoResponses(ctx);
                return;
            }

            if(msg == '‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª autoResponse.json ‚¨áÔ∏è') {
                await this.getAutoResponseFile(ctx);
                return;
            }

            if(msg == '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª autoResponse.json ‚¨ÜÔ∏è') {
                this.uploadAutoResponseFile(ctx);
                return;
            }

            // Settings editing buttons
            if(msg == 'üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîÑ') {
                await this.showSettings(ctx);
                return;
            }

            if(msg == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É ‚úèÔ∏è') {
                this.changeSettingValue(ctx);
                return;
            }

            if(msg == '‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª settings.txt ‚¨áÔ∏è') {
                await this.getSettingsFile(ctx);
                return;
            }

            if(msg == '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª settings.txt ‚¨ÜÔ∏è') {
                this.uploadSettingsFile(ctx);
                return;
            }

            // Restart confirmation buttons
            if(msg == '‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å') {
                ctx.reply('‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', this.mainKeyboard.reply());
                return;
            }

            if(msg == '‚ùå –û—Ç–º–µ–Ω–∞') {
                ctx.reply('‚ùå –û—Ç–º–µ–Ω–∞.', this.mainKeyboard.reply());
                return;
            }

            if(msg == 'üîô –ù–∞–∑–∞–¥ üîô') {
                await this.back(ctx);
                return;
            }

            if(this.waitingForLotName) {
                await this.saveLotName(ctx);
                return;
            }

            if(this.waitingForLotContent) {
                await this.saveLotContent(ctx);
                return;
            }

            if(this.waitingForLotDelete) {
                await this.deleteLot(ctx);
                return;
            }

            if(this.waitingForDeliveryFile) {
                await this.onUploadDeliveryFile(ctx);
                return;
            }
            
            if(this.waitingForReply) {
                await this.handleReplyMessage(ctx);
                return;
            }
            
            if(this.waitingForAutoResponsePatterns) {
                await this.saveAutoResponsePatterns(ctx);
                return;
            }
            
            if(this.waitingForAutoResponseResponses) {
                await this.saveAutoResponseResponses(ctx);
                return;
            }
            
            if(this.waitingForAutoResponseDelete) {
                await this.deleteAutoResponse(ctx);
                return;
            }
            
            if(this.waitingForAutoResponseFile) {
                await this.onUploadAutoResponseFile(ctx);
                return;
            }
            
            if(this.waitingForSettingsFile) {
                await this.onUploadSettingsFile(ctx);
                return;
            }
            
            if(this.waitingForSettingValue) {
                await this.handleSettingValueChange(ctx);
                return;
            }
            
            // Check if this is a reply command
            if(msg && msg.startsWith('/reply_')) {
                await this.startReplyToUser(ctx, msg);
                return;
            }
            
            // Auto-response pause management commands
            if(msg && msg.startsWith('/pause ')) {
                await this.handlePauseCommand(ctx, msg);
                return;
            }
            
            if(msg && msg.startsWith('/unpause ')) {
                await this.handleUnpauseCommand(ctx, msg);
                return;
            }
            
            if(msg === '/pauselist') {
                await this.handlePauseListCommand(ctx);
                return;
            }

            this.waitingForLotName = false;
            this.waitingForLotContent = false;
            this.waitingForLotDelete = false;
            this.waitingForDeliveryFile = false;
            this.waitingForReply = false;
            this.waitingForAutoResponsePatterns = false;
            this.waitingForAutoResponseResponses = false;
            this.waitingForAutoResponseDelete = false;
            this.waitingForAutoResponseFile = false;
            this.waitingForSettingsFile = false;
            this.waitingForSettingValue = false;
            this.waitingForFeedbackAction = false; // Reset feedback action flag
                    
            this.currentAutoResponse = {
                patterns: [],
                responses: []
            };
            
            ctx.reply('üè† –ú–µ–Ω—é', this.mainKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ telegram —Å–æ–æ–±—â–µ–Ω–∏—è: ${err}`, 'r');
            ctx.reply(`–í–æ—É! –Ø —Å–ª–æ–≤–∏–ª –æ—à–∏–±–∫—É... –•–∑ –∫–∞–∫ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ –≤–æ—Ç –≤—Å—ë, —á—Ç–æ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ: ${err}`, this.mainKeyboard.reply());
        }
    }

    isUserAuthed(ctx) {
        if(global.settings.userName == ctx.update.message.from.username) {
            if(!getConst('chatId')) setConst('chatId', ctx.update.message.chat.id);
            return true;
        }
        return false;
    }

    getMainKeyboard() {
        const keyboard = Keyboard.make([
            ['‚ùî –ò–Ω—Ñ–æ ‚ùî', 'üî• –°—Ç–∞—Ç—É—Å üî•'],
            ['üöÄ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É üöÄ'],
            ['ü§ñ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ü§ñ'],
            ['üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é üìä'],
            ['‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è']
        ]);

        return keyboard;
    }

    getEditGoodsKeyboard() {
        const keyboard = Keyboard.make([
            ['‚òëÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚òëÔ∏è', 'üìõ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üìõ'],
            ['‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ ‚¨áÔ∏è', '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ ‚¨ÜÔ∏è'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getEditAutoResponseKeyboard() {
        const keyboard = Keyboard.make([
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚ûï', '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚ùå'],
            ['üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã üìÑ'],
            ['‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª autoResponse.json ‚¨áÔ∏è'],
            ['‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª autoResponse.json ‚¨ÜÔ∏è'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getEditSettingsKeyboard() {
        const keyboard = Keyboard.make([
            ['üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîÑ', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É ‚úèÔ∏è'],
            ['‚¨áÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª settings.txt ‚¨áÔ∏è'],
            ['‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª settings.txt ‚¨ÜÔ∏è'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getFeedbackKeyboard() {
        const keyboard = Keyboard.make([
            ['üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã üìã'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getSelectIssueTypeKeyboard() {
        const keyboard = Keyboard.make([
            ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–≤—ã–¥–∞—á–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞)'],
            ['–ê–∫–∫–∞—É–Ω—Ç—ã (–≤—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏)'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getBackKeyboard() {
        const keyboard = Keyboard.make([
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    async replyStatus(ctx) {
        const time = Date.now();
        const workTimeDiff = time - global.startTime;
        const lastUpdateTimeDiff = time - global.appData.lastUpdate;

        function declensionNum(num, words) {
            return words[(num % 100 > 4 && num % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(num % 10 < 5) ? num % 10 : 5]];
        }

        function msToTime(ms) {
            let days = ms > 0 ? Math.floor(ms / 1000 / 60 / 60 / 24) : 0;
            let hours = ms > 0 ? Math.floor(ms / 1000 / 60 / 60) % 24 : 0;
            let minutes = ms > 0 ? Math.floor(ms / 1000 / 60) % 60 : 0;
            let seconds = ms > 0 ? Math.floor(ms / 1000) % 60 : 0;
            days = ms < 10 ? '0' + days : days;
            hours = hours < 10 ? '0' + hours : hours;
            minutes = minutes < 10 ? '0' + minutes : minutes;
            seconds = seconds < 10 ? '0' + seconds : seconds;
            const daysTitle = declensionNum(days, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']);
            const hoursTitle = declensionNum(hours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']);
            const minutesTitle = declensionNum(minutes, ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç']);
            const secondsTitle = declensionNum(seconds, ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥']);
            return {days: days, hours: hours, minutes: minutes, seconds: seconds, daysTitle: daysTitle, hoursTitle: hoursTitle, minutesTitle: minutesTitle, secondsTitle: secondsTitle};
        }

        const workTimeArr = msToTime(workTimeDiff);
        const workTime = `${workTimeArr.days} ${workTimeArr.daysTitle} ${workTimeArr.hours} ${workTimeArr.hoursTitle} ${workTimeArr.minutes} ${workTimeArr.minutesTitle} ${workTimeArr.seconds} ${workTimeArr.secondsTitle}`;

        const lastUpdateTimeArr = msToTime(lastUpdateTimeDiff);
        const lastUpdateTime = `${lastUpdateTimeArr.minutes} ${lastUpdateTimeArr.minutesTitle} ${lastUpdateTimeArr.seconds} ${lastUpdateTimeArr.secondsTitle}`;

        const autoIssue = (global.settings.autoIssue) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const alwaysOnline = (global.settings.alwaysOnline) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const lotsRaise = (global.settings.lotsRaise) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const goodsStateCheck = (global.settings.goodsStateCheck) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const autoResponse = (global.settings.autoResponse) ? '–í–∫–ª' : '–í—ã–∫–ª';

        const msg = `üî• <b>–°—Ç–∞—Ç—É—Å</b> üî•\n\nüîë –ê–∫–∫–∞—É–Ω—Ç: <code>${global.appData.userName}</code>\nüí∞ –ë–∞–ª–∞–Ω—Å: <code>${global.appData.balance}</code>\nüõçÔ∏è –ü—Ä–æ–¥–∞–∂–∏: <code>${global.appData.sales}</code>\n‚ôªÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <code>${lastUpdateTime} –Ω–∞–∑–∞–¥</code>\n\nüïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <code>${workTime}</code>\n‚è≤ –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω: <code>${alwaysOnline}</code>\nüëæ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: <code>${autoResponse}</code>\nüöÄ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞: <code>${autoIssue}</code>\nüèÜ –ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>${lotsRaise}</code>\nüî® –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>${goodsStateCheck}</code>\n\n<i><a href="https://t.me/fplite">FunPayServer</a></i>`;
        const params = this.mainKeyboard.reply();
        params.disable_web_page_preview = true;
        ctx.replyWithHTML(msg, params);
    }

    async editAutoIssue(ctx) {
        try {
            const goods = await load('data/configs/delivery.json');
            let goodsStr = '';

            let msg = `üìÑ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b> üìÑ`;
            await ctx.replyWithHTML(msg, this.editGoodsKeyboard.reply());
    
            for(let i = 0; i < goods.length; i++) {
                goodsStr += `[${i + 1}] ${goods[i].name}\n`;
    
                if(goodsStr.length > 3000) {
                    await ctx.replyWithHTML(goodsStr, this.editGoodsKeyboard.reply());
                    goodsStr = '';
                }

                if(i == (goods.length - 1)) {
                    await ctx.replyWithHTML(goodsStr, this.editGoodsKeyboard.reply());
                }
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${err}`, 'r');
        }
    }

    getInfo(ctx) {
        const msg = `‚ùî <b>FunPayServer</b> ‚ùî\n\n<b>FunPayServer</b> - —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏ funpay.com —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π <b>NightStranger</b>.\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –≤—Å–µ–º, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ‚ù§Ô∏è. –û–Ω –∂–∏–≤—ë—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º.\n\n<a href="https://github.com/NightStrang6r/FunPayServer">GitHub</a> | <a href="https://github.com/NightStrang6r/FunPayServer">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</a>`;
        ctx.replyWithHTML(msg);
    }

    addProduct(ctx) {
        ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`, this.selectIssueTypeKeyboard.reply());
    }

    addProductName(ctx) {
        ctx.replyWithHTML(`–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–≤–∞—Ç—å –µ–≥–æ –∏–∑ funpay. –≠–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.`);
        this.waitingForLotName = true;
    }

    removeProduct(ctx) {
        ctx.replyWithHTML(`–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`);
        this.waitingForLotDelete = true;
    }

    async back(ctx) {
        this.waitingForLotName = false;
        this.waitingForLotContent = false;
        this.waitingForLotDelete = false;
        this.waitingForDeliveryFile = false;

        if(this.products.length > 0) {
            let goods = await load('data/configs/delivery.json');

            const product = {
                "name": this.lotName,
                "nodes": this.products
            }

            goods.push(product);
            await updateFile(goods, 'data/configs/delivery.json');
            this.products = [];
        }

        ctx.reply('üè† –ú–µ–Ω—é', this.mainKeyboard.reply());
    }

    async saveLotName(ctx) {
        const msg = ctx.update.message.text;

        this.waitingForLotName = false;
        this.lotName = msg;

        let replyMessage = '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.';
        if(this.lotType == 'accounts') {
            replyMessage = '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏. –ù–∞–∂–º–∏ "üîô –ù–∞–∑–∞–¥ üîô" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–≤–∞—Ä.';
        }

        ctx.reply(replyMessage, this.backKeyboard.reply());
        this.waitingForLotContent = true;
    }

    async saveLotContent(ctx) {
        const msg = ctx.update.message.text;

        this.lotContent = msg;
        let keyboard = this.backKeyboard;
        let goods = await load('data/configs/delivery.json');

        if(this.lotType != 'accounts') {
            this.waitingForLotContent = false;
            keyboard = this.mainKeyboard;

            const product = {
                "name": this.lotName,
                "message": this.lotContent
            }
    
            goods.push(product);
            await updateFile(goods, 'data/configs/delivery.json');

            this.lotName = '';
            this.lotContent = '';
        } else {
            keyboard = this.backKeyboard;

            this.products.push(msg);
        }

        ctx.reply(`–û–∫–µ–π, —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–æ–≤–∞—Ä.`, keyboard.reply());
    }

    async deleteLot(ctx) {
        const msg = ctx.update.message.text;
        this.waitingForLotDelete = false;

        let num = Number(msg);
        if(isNaN(num)) {
            ctx.reply(`–ß—Ç–æ-—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ... –í–µ—Ä–Ω—É —Ç–µ–±—è –≤ –º–µ–Ω—é.`, this.mainKeyboard.reply());
            return;
        }

        let goods = await load('data/configs/delivery.json');
        if(num > goods.length || num < 0) {
            ctx.reply(`–¢–∞–∫–æ–≥–æ id –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏. –í–µ—Ä–Ω—É —Ç–µ–±—è –≤ –º–µ–Ω—é.`, this.mainKeyboard.reply());
            return;
        }

        let name = goods[num - 1].name;
        goods.splice(num - 1, 1);
        await updateFile(goods, 'data/configs/delivery.json');

        ctx.reply(`–û–∫, —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä "${name}" –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`, this.mainKeyboard.reply());
    }

    async getAutoIssueFile(ctx) {
        let contents = getConst('autoIssueFilePath');

        ctx.replyWithDocument({
            source: contents,
            filename: 'delivery.json'
        }).catch(function(error) { log(error); })
    }

    uploadAutoIssueFile(ctx) {
        this.waitingForDeliveryFile = true;
        ctx.reply(`–û–∫–µ–π, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.`, this.backKeyboard.reply());
    }

    async onUploadDeliveryFile(ctx) {
        let file = ctx.update.message.document;
        let file_id = file.file_id;
        let file_name = file.file_name;
        let contents = null;

        if(file_name != 'delivery.json') {
            ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.`, this.mainKeyboard.reply());
            return;
        }

        try {
            ctx.reply(`‚ôªÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...`);
            
            log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: ${file_name}, file_id: ${file_id}`, 'c');
            
            // Use Telegraf's built-in file downloading capability with the working approach
            try {
                // Get file info first
                const fileInfo = await this.bot.telegram.getFile(file_id);
                log(`–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: ${JSON.stringify(fileInfo)}`, 'g');
                
                // Use Telegraf's internal method to download the file
                const fileUrl = `https://api.telegram.org/file/bot${this.bot.token}/${fileInfo.file_path}`;
                
                // Use the working approach with Telegram-Bot-SDK User-Agent
                const fetchOptions = {
                    method: 'GET',
                    headers: {
                        'User-Agent': 'Telegram-Bot-SDK/1.0'
                    }
                };
                
                log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –ø–æ URL: ${fileUrl}`, 'c');
                
                const response = await fetch(fileUrl, fetchOptions);
                log(`–û—Ç–≤–µ—Ç –æ—Ç Telegram API –¥–ª—è –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: ${response.status} ${response.statusText}`, 'c');
                
                if (!response.ok) {
                    throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
                }
                
                contents = await response.text();
                log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–ª–∏–Ω–∞: ${contents.length}`, 'g');
            } catch (fetchError) {
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –∏–∑ Telegram: ${fetchError}`, 'r');
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –∏–∑ Telegram: ${fetchError.message}`);
            }
        } catch(e) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: ${e}`, 'r');
            ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${e.message}`, this.mainKeyboard.reply());
            return;
        }

        try {
            ctx.reply(`‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å...`);

            let json = JSON.parse(contents);
            await updateFile(json, 'data/configs/delivery.json');
            ctx.reply(`‚úîÔ∏è –û–∫–µ–π, –æ–±–Ω–æ–≤–∏–ª —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`, this.editGoodsKeyboard.reply());
        } catch(e) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: ${e}`, 'r');
            ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: ${e.message}`, this.mainKeyboard.reply());
        }
    }

    async onInlineQuery(ctx) {
        console.log(ctx);
    }

    getChatID() {
        try {
            // First try to get from storage constants
            let chatId = getConst('chatId');
            
            // If that fails, try to get from settings
            if (!chatId && global.settings) {
                chatId = global.settings.chatId;
            }
            
            // If that also fails, try to read from telegram.txt file
            if (!chatId) {
                const fs = global.fs_extra;
                const _dirname = process.cwd();
                const telegramFilePath = `${_dirname}/data/other/telegram.txt`;
                
                if (fs.existsSync(telegramFilePath)) {
                    const fileContent = fs.readFileSync(telegramFilePath, 'utf8').trim();
                    if (fileContent && !isNaN(fileContent)) {
                        chatId = fileContent;
                    }
                }
            }
            
            // Log for debugging
            log(`–ü–æ–ª—É—á–µ–Ω–∏–µ Chat ID: ${chatId}`, 'c');
            
            // Validate that it's a valid number
            if (chatId && !isNaN(chatId)) {
                return chatId;
            }
            
            log(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Chat ID: ${chatId}`, 'r');
            return false;
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Chat ID: ${error}`, 'r');
            return false;
        }
    }

    async sendNewMessageNotification(message) {
        let msg = `üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b><i>${message.user}</i></b>.\n\n`;
        msg += `${message.content}\n\n`;
        msg += `<i>${message.time}</i> | <a href="https://funpay.com/chat/?node=${message.node}">–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç</a>`

        let chatId = this.getChatID();
        if(!chatId) return;
        
        // Create unique reply command
        const replyCommand = `/reply_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        // Store conversation info for reply functionality
        this.activeChats.set(replyCommand, {
            userName: message.user,
            node: message.node,
            time: Date.now()
        });
        
        // Clean up old conversations (keep only last 50)
        if(this.activeChats.size > 50) {
            const oldEntries = Array.from(this.activeChats.keys()).slice(0, this.activeChats.size - 50);
            oldEntries.forEach(key => this.activeChats.delete(key));
        }
        
        // Create inline keyboard with reply and pause buttons
        const replyKeyboard = {
            inline_keyboard: [
                [{
                    text: `üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å ${message.user}`,
                    callback_data: replyCommand
                }],
                [
                    {
                        text: `‚è∏Ô∏è –ü–∞—É–∑–∞ 5–º`,
                        callback_data: `pause_${message.user}_5`
                    },
                    {
                        text: `‚è∏Ô∏è –ü–∞—É–∑–∞ 10–º`,
                        callback_data: `pause_${message.user}_10`
                    },
                    {
                        text: `‚è∏Ô∏è –ü–∞—É–∑–∞ 30–º`,
                        callback_data: `pause_${message.user}_30`
                    }
                ]
            ]
        };
        
        this.bot.telegram.sendMessage(chatId, msg, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: replyKeyboard
        });
    }

    async sendNewOrderNotification(order) {
        let msg = `‚úîÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> <a href="https://funpay.com/orders/${order.id.replace('#', '')}/">${order.id}</a> –Ω–∞ —Å—É–º–º—É <b><i>${order.price} ${order.unit}</i></b>.\n\n`;
        msg += `üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <a href="https://funpay.com/users/${order.buyerId}/">${order.buyerName}</a>\n`;
        msg += `üõçÔ∏è <b>–¢–æ–≤–∞—Ä:</b> <code>${order.name}</code>`;

        let chatId = this.getChatID();
        log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ ${order.id} –≤ Telegram. Chat ID: ${chatId}`, 'c');
        
        if(!chatId) {
            log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ ${order.id}`, 'r');
            // Try to get chat ID from global settings as fallback
            if(global.settings && global.storage && global.storage.getConst) {
                chatId = global.storage.getConst('chatId');
                if(chatId) {
                    log(`–ü–æ–ª—É—á–µ–Ω Chat ID –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${chatId}`, 'c');
                }
            }
            
            if(!chatId) {
                log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`, 'r');
                return;
            }
        }
        
        try {
            await this.bot.telegram.sendMessage(chatId, msg, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });
            log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ ${order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`, 'g');
            return true; // Return success status
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ ${order.id} –≤ Telegram: ${error}`, 'r');
            // Try to send a simplified message as fallback
            try {
                const simpleMsg = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${order.id} –æ—Ç ${order.buyerName} –Ω–∞ ${order.price} ${order.unit}`;
                await this.bot.telegram.sendMessage(chatId, simpleMsg);
                log(`–†–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ ${order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`, 'g');
                return true;
            } catch (fallbackError) {
                log(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${fallbackError}`, 'r');
                return false;
            }
        }
    }

    async sendLotsRaiseNotification(category, nextTimeMsg) {
        let msg = `‚¨ÜÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <a href="https://funpay.com/lots/${category.node_id}/trade">${category.name}</a> –ø–æ–¥–Ω—è—Ç—ã.\n`;
        msg += `‚åö –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ: <b><i>${nextTimeMsg}</i></b>`;

        let chatId = this.getChatID();
        if(!chatId) return;
        this.bot.telegram.sendMessage(chatId, msg, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }

    async sendDeliveryNotification(buyerName, productName, message) {
        let msg = `üì¶ –¢–æ–≤–∞—Ä <code>${productName}</code> –≤—ã–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é <b><i>${buyerName}</i></b> —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n`;
        msg += `${message}`;

        let chatId = this.getChatID();
        log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –≤ Telegram. Chat ID: ${chatId}`, 'c');
        
        if(!chatId) {
            log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞`, 'r');
            // Try to get chat ID from global settings as fallback
            if(global.settings && global.storage && global.storage.getConst) {
                chatId = global.storage.getConst('chatId');
                if(chatId) {
                    log(`–ü–æ–ª—É—á–µ–Ω Chat ID –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${chatId}`, 'c');
                }
            }
            
            if(!chatId) {
                log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`, 'r');
                return;
            }
        }
        
        try {
            await this.bot.telegram.sendMessage(chatId, msg, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });
            log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`, 'g');
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –≤ Telegram: ${error}`, 'r');
            // Try to send a simplified message as fallback
            try {
                const simpleMsg = `–¢–æ–≤–∞—Ä "${productName}" –≤—ã–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${buyerName}`;
                await this.bot.telegram.sendMessage(chatId, simpleMsg);
                log(`–†–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`, 'g');
            } catch (fallbackError) {
                log(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${fallbackError}`, 'r');
            }
        }
    }
    
    // Handle callback queries from inline buttons
    async onCallbackQuery(ctx) {
        try {
            const callbackData = ctx.callbackQuery.data;
            
            if(callbackData.startsWith('/reply_')) {
                await this.startReplyToUser(ctx, callbackData);
            }
            else if(callbackData.startsWith('pause_')) {
                await this.handleInlinePauseButton(ctx, callbackData);
            }
            
            // Answer callback query to remove loading state
            ctx.answerCbQuery();
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: ${err}`, 'r');
            ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }
    
    // Start reply process to a FunPay user
    async startReplyToUser(ctx, replyCommand) {
        try {
            const chatInfo = this.activeChats.get(replyCommand);
            
            if(!chatInfo) {
                ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
                return;
            }
            
            // Check if conversation is not too old (24 hours)
            const age = Date.now() - chatInfo.time;
            if(age > 24 * 60 * 60 * 1000) {
                ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ. –û—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
                this.activeChats.delete(replyCommand);
                return;
            }
            
            this.waitingForReply = true;
            this.currentReplyInfo = chatInfo;
            
            const cancelKeyboard = {
                keyboard: [[
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç' }
                ]],
                resize_keyboard: true,
                one_time_keyboard: true
            };
            
            ctx.reply(
                `üí¨ –û—Ç–≤–µ—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${chatInfo.userName}</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: cancelKeyboard
                }
            );
            
            // Clean up the reply command from activeChats
            this.activeChats.delete(replyCommand);
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞: ${err}`, 'r');
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞.');
        }
    }
    
    // Handle reply message from user
    async handleReplyMessage(ctx) {
        try {
            const msg = ctx.update.message.text;
            
            if(msg === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç') {
                this.waitingForReply = false;
                this.currentReplyInfo = null;
                ctx.reply('‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.', this.mainKeyboard.reply());
                return;
            }
            
            if(!this.currentReplyInfo) {
                ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', this.mainKeyboard.reply());
                this.waitingForReply = false;
                return;
            }
            
            // Send message to FunPay with manual watermark (different from auto-response watermark)
            const { sendMessage } = global.chat;
            const success = await sendMessage(this.currentReplyInfo.node, msg, false, 'manual');
            
            if(success) {
                ctx.reply(
                    `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${this.currentReplyInfo.userName}</b>!`,
                    {
                        parse_mode: 'HTML',
                        ...this.mainKeyboard.reply()
                    }
                );
                log(`–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${c.yellowBright(this.currentReplyInfo.userName)}: "${msg}"`, 'g');
            } else {
                ctx.reply(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${this.currentReplyInfo.userName}</b>.`,
                    {
                        parse_mode: 'HTML',
                        ...this.mainKeyboard.reply()
                    }
                );
                log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${c.yellowBright(this.currentReplyInfo.userName)}`, 'r');
            }
            
            this.waitingForReply = false;
            this.currentReplyInfo = null;
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: ${err}`, 'r');
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.', this.mainKeyboard.reply());
            this.waitingForReply = false;
            this.currentReplyInfo = null;
        }
    }
    
    // Handle /pause [username] [minutes] command
    async handlePauseCommand(ctx, msg) {
        try {
            const parts = msg.split(' ');
            if(parts.length < 2) {
                ctx.reply('üìù –§–æ—Ä–º–∞—Ç: /pause [–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–º–∏–Ω—É—Ç—ã]\n–ü—Ä–∏–º–µ—Ä: /pause Username123 15');
                return;
            }
            
            const targetUser = parts[1];
            const minutes = parts.length > 2 ? parseInt(parts[2]) || 10 : 10;
            
            const { pauseAutoResponseForUser } = global.chat;
            pauseAutoResponseForUser(targetUser, minutes);
            
            ctx.reply(
                `‚è≤Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è <b>${targetUser}</b> –Ω–∞ <b>${minutes} –º–∏–Ω.</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unpause ${targetUser} –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`,
                { parse_mode: 'HTML' }
            );
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã pause: ${err}`, 'r');
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
        }
    }
    
    // Handle /unpause [username] command
    async handleUnpauseCommand(ctx, msg) {
        try {
            const parts = msg.split(' ');
            if(parts.length < 2) {
                ctx.reply('üìù –§–æ—Ä–º–∞—Ç: /unpause [–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n–ü—Ä–∏–º–µ—Ä: /unpause Username123');
                return;
            }
            
            const targetUser = parts[1];
            
            const { unpauseAutoResponseForUser } = global.chat;
            const wasUnpaused = unpauseAutoResponseForUser(targetUser);
            
            if(wasUnpaused) {
                ctx.reply(
                    `‚ñ∂Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è <b>${targetUser}</b>.`,
                    { parse_mode: 'HTML' }
                );
            } else {
                ctx.reply(
                    `‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${targetUser}</b> –Ω–µ –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ.`,
                    { parse_mode: 'HTML' }
                );
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã unpause: ${err}`, 'r');
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
        }
    }
    
    // Handle /pauselist command
    async handlePauseListCommand(ctx) {
        try {
            const { getPausedUsersInfo } = global.chat;
            const pausedUsersInfo = getPausedUsersInfo();
            
            if(pausedUsersInfo.length === 0) {
                ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ.');
            } else {
                let pauseList = '‚è∏Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –ø–∞—É–∑–µ:</b>\n\n';
                for(const userInfo of pausedUsersInfo) {
                    pauseList += `‚Ä¢ <code>${userInfo.userName}</code>: ${userInfo.remainingMinutes} –º–∏–Ω.\n`;
                }
                pauseList += '\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unpause [–∏–º—è] –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è';
                
                ctx.reply(pauseList, { parse_mode: 'HTML' });
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã pauselist: ${err}`, 'r');
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—É–∑.');
        }
    }
    
    // === SETTINGS MANAGEMENT METHODS ===
    
    async editSettings(ctx) {
        const msg = `‚öôÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫</b> ‚öôÔ∏è\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.`;
        await ctx.replyWithHTML(msg, this.editSettingsKeyboard.reply());
    }
    
    async showSettings(ctx) {
        try {
            const settings = global.settings;
            let settingsText = `üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b> üìã\n\n`;
            
            settingsText += `<b>[FunPay –Ω–∞—Å—Ç—Ä–æ–π–∫–∏]</b>\n`;
            settingsText += `‚Ä¢ alwaysOnline: <code>${settings.alwaysOnline}</code>\n`;
            settingsText += `‚Ä¢ lotsRaise: <code>${settings.lotsRaise}</code>\n`;
            settingsText += `‚Ä¢ goodsStateCheck: <code>${settings.goodsStateCheck}</code>\n`;
            settingsText += `‚Ä¢ autoIssue: <code>${settings.autoIssue}</code>\n`;
            settingsText += `‚Ä¢ autoResponse: <code>${settings.autoResponse}</code>\n`;
            settingsText += `‚Ä¢ greetingMessage: <code>${settings.greetingMessage}</code>\n`;
            settingsText += `‚Ä¢ greetingMessageText: <code>${settings.greetingMessageText}</code>\n`;
            settingsText += `‚Ä¢ followUpMessage: <code>${settings.followUpMessage}</code>\n`;
            settingsText += `‚Ä¢ followUpMessageText: <code>${settings.followUpMessageText}</code>\n`;
            settingsText += `‚Ä¢ watermark: <code>${settings.watermark}</code>\n`;
            settingsText += `‚Ä¢ telegramWatermark: <code>${settings.telegramWatermark}</code>\n\n`;
            
            settingsText += `<b>[Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏]</b>\n`;
            settingsText += `‚Ä¢ telegramBot: <code>${settings.telegramBot}</code>\n`;
            settingsText += `‚Ä¢ userName: <code>${settings.userName}</code>\n`;
            settingsText += `‚Ä¢ newMessageNotification: <code>${settings.newMessageNotification}</code>\n`;
            settingsText += `‚Ä¢ newOrderNotification: <code>${settings.newOrderNotification}</code>\n`;
            settingsText += `‚Ä¢ lotsRaiseNotification: <code>${settings.lotsRaiseNotification}</code>\n`;
            settingsText += `‚Ä¢ deliveryNotification: <code>${settings.deliveryNotification}</code>\n\n`;
            
            settingsText += `<b>[Proxy –Ω–∞—Å—Ç—Ä–æ–π–∫–∏]</b>\n`;
            settingsText += `‚Ä¢ enabled: <code>${settings.proxy.useProxy}</code>\n`;
            settingsText += `‚Ä¢ host: <code>${settings.proxy.host}</code>\n`;
            settingsText += `‚Ä¢ port: <code>${settings.proxy.port}</code>`;
            
            ctx.replyWithHTML(settingsText, this.editSettingsKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.`, this.editSettingsKeyboard.reply());
        }
    }
    
    changeSettingValue(ctx) {
        ctx.replyWithHTML(
            `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ</code>\n<code>greetingMessage: 1</code>\n<code>greetingMessageText: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?</code>\n<code>watermark: [ üî•MyBot ]</code>\n<code>followUpMessageText: –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Å—Å—ã–ª–∫–µ https://funpay.com/orders/{order_id}/</code>`,
            this.backKeyboard.reply()
        );
        this.waitingForSettingValue = true;
    }
    
    async handleSettingValueChange(ctx) {
        try {
            const msg = ctx.update.message.text;
            this.waitingForSettingValue = false;
            
            // Parse the setting format: "parameter: value"
            const colonIndex = msg.indexOf(':');
            if (colonIndex === -1) {
                ctx.replyWithHTML(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ</code>`, this.editSettingsKeyboard.reply());
                return;
            }
            
            const parameter = msg.substring(0, colonIndex).trim();
            const value = msg.substring(colonIndex + 1).trim();
            
            if (!parameter || !value) {
                ctx.replyWithHTML(`‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`, this.editSettingsKeyboard.reply());
                return;
            }
            
            // Update the setting
            const success = await this.updateSetting(parameter, value);
            
            if (success) {
                ctx.replyWithHTML(
                    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n<b>${parameter}</b>: <code>${value}</code>\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.`,
                    this.editSettingsKeyboard.reply()
                );
            } else {
                ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.`, this.editSettingsKeyboard.reply());
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`, this.editSettingsKeyboard.reply());
            this.waitingForSettingValue = false;
        }
    }
    
    async updateSetting(parameter, value) {
        try {
            const { saveConfig } = global.storage;
            const settings = global.settings;
            
            // List of valid parameters that can be changed
            const validParameters = [
                'alwaysOnline', 'lotsRaise', 'goodsStateCheck', 'autoIssue', 'autoResponse',
                'greetingMessage', 'greetingMessageText', 'watermark', 'telegramWatermark',
                'newMessageNotification', 'newOrderNotification', 'lotsRaiseNotification', 'deliveryNotification',
                'followUpMessage', 'followUpMessageText'
            ];
            
            if (!validParameters.includes(parameter)) {
                log(`–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${parameter}`, 'r');
                return false;
            }
            
            // Convert numeric values
            let processedValue = value;
            if (['alwaysOnline', 'lotsRaise', 'goodsStateCheck', 'autoIssue', 'autoResponse', 
                'greetingMessage', 'newMessageNotification', 'newOrderNotification', 
                'lotsRaiseNotification', 'deliveryNotification', 'followUpMessage'].includes(parameter)) {
                processedValue = parseInt(value);
                if (isNaN(processedValue) || (processedValue !== 0 && processedValue !== 1)) {
                    log(`–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${parameter}: ${value}`, 'r');
                    return false;
                }
            }
            
            // Update the setting
            settings[parameter] = processedValue;
            
            // Save to file
            await saveConfig(settings);
            
            log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${parameter} = ${processedValue}`, 'g');
            return true;
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${err}`, 'r');
            return false;
        }
    }
    
    async getSettingsFile(ctx) {
        try {
            ctx.replyWithDocument({
                source: './settings.txt',
                filename: 'settings.txt'
            }).catch(function(error) { 
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error}`, 'r');
                ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.`, this.editSettingsKeyboard.reply());
            });
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.`, this.editSettingsKeyboard.reply());
        }
    }
    
    // Add feedback management methods
    async manageFeedback(ctx) {
        ctx.reply('üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é', this.feedbackKeyboard.reply());
    }

    async handleFeedbackAction(ctx, msg) {
        try {
            if (!global.googleSheetsFAQ) {
                ctx.reply('‚ùå –ú–æ–¥—É–ª—å Google Sheets FAQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.', this.feedbackKeyboard.reply());
                this.waitingForFeedbackAction = false;
                return;
            }

            // Handle cancel action
            if (msg.trim().toLowerCase() === '–æ—Ç–º–µ–Ω–∞' || msg.trim().toLowerCase() === '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å') {
                ctx.reply('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', this.feedbackKeyboard.reply());
                this.waitingForFeedbackAction = false;
                this.pendingFeedbackAction = null;
                return;
            }

            // Handle approve action (when user provides a custom answer)
            if (this.pendingFeedbackAction && this.pendingFeedbackAction.type === 'approve') {
                const questionId = this.pendingFeedbackAction.questionId;
                const newAnswer = msg.trim();

                // Update status to approved with the new answer
                await global.googleSheetsFAQ.updatePendingResponseStatus(questionId, 'approved', newAnswer);
                ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç —Å ID ${questionId} –æ–¥–æ–±—Ä–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º.`, this.feedbackKeyboard.reply());
                log(`–û—Ç–≤–µ—Ç —Å ID ${questionId} –æ–¥–æ–±—Ä–µ–Ω. –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ${newAnswer}`, 'g');
                
                this.waitingForFeedbackAction = false;
                this.pendingFeedbackAction = null;
                return;
            }

            // Handle reject action (when user provides a custom answer)
            if (this.pendingFeedbackAction && this.pendingFeedbackAction.type === 'reject') {
                const questionId = this.pendingFeedbackAction.questionId;
                const newAnswer = msg.trim();

                // Update status to rejected with new answer
                await global.googleSheetsFAQ.updatePendingResponseStatus(questionId, 'rejected', newAnswer);
                ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç —Å ID ${questionId} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`, this.feedbackKeyboard.reply());
                log(`–û—Ç–≤–µ—Ç —Å ID ${questionId} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ${newAnswer}`, 'g');
                
                this.waitingForFeedbackAction = false;
                this.pendingFeedbackAction = null;
                return;
            }
            
            // Handle edit action (when user provides a custom answer to replace the AI answer)
            if (this.pendingFeedbackAction && this.pendingFeedbackAction.type === 'edit') {
                const questionId = this.pendingFeedbackAction.questionId;
                const newAnswer = msg.trim();

                // Update status to approved with the new answer (editing means providing a better answer)
                await global.googleSheetsFAQ.updatePendingResponseStatus(questionId, 'approved', newAnswer);
                ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç —Å ID ${questionId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω.`, this.feedbackKeyboard.reply());
                log(`–û—Ç–≤–µ—Ç —Å ID ${questionId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω. –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ${newAnswer}`, 'g');
                
                this.waitingForFeedbackAction = false;
                this.pendingFeedbackAction = null;
                return;
            }

            ctx.reply('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', this.feedbackKeyboard.reply());
            this.waitingForFeedbackAction = false;
            this.pendingFeedbackAction = null;
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${err}`, 'r');
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, this.feedbackKeyboard.reply());
            this.waitingForFeedbackAction = false;
            this.pendingFeedbackAction = null;
        }
    }

    async viewPendingResponses(ctx) {
        try {
            // Try to initialize Google Sheets FAQ if not already done and enabled in settings
            if (!global.googleSheetsFAQ && global.settings && global.settings.googleSheetsFAQEnabled) {
                log(`Google Sheets FAQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`, 'c');
                await this.initializeGoogleSheetsFAQ();
            }
            
            if (!global.googleSheetsFAQ) {
                ctx.reply('‚ùå –ú–æ–¥—É–ª—å Google Sheets FAQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.', this.feedbackKeyboard.reply());
                return;
            }

            const pendingResponses = global.googleSheetsFAQ.getPendingResponses();
            if(pendingResponses.length === 0) {
                ctx.reply('üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.', this.feedbackKeyboard.reply());
            } else {
                // Send each pending response with inline buttons
                for(let i = 0; i < pendingResponses.length; i++) {
                    const pending = pendingResponses[i];
                    let message = `üì¨ –û–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n`;
                    message += `üÜî ID: <code>${pending.id}</code>\n`;
                    message += `‚ùì –í–æ–ø—Ä–æ—Å: <b>${pending.question}</b>\n`;
                    message += `ü§ñ –û—Ç–≤–µ—Ç –ò–ò: <i>${pending.aiAnswer}</i>\n\n`;
                    
                    // Create inline keyboard with approve/reject/edit buttons
                    const inlineKeyboard = {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
                                    callback_data: `approve_${pending.id}`
                                },
                                {
                                    text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                    callback_data: `edit_${pending.id}`
                                },
                                {
                                    text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                                    callback_data: `reject_${pending.id}`
                                }
                            ]
                        ]
                    };
                    
                    await ctx.replyWithHTML(message, {
                        reply_markup: inlineKeyboard
                    });
                }
                
                // Add a summary message
                const summaryMessage = `–í—Å–µ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${pendingResponses.length}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.`;
                ctx.reply(summaryMessage, this.feedbackKeyboard.reply());
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${err}`, 'r');
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, this.feedbackKeyboard.reply());
        }
    }

    // These methods are no longer needed with the new inline button system
    // async approveResponse(ctx) { ... }
    // async rejectResponse(ctx) { ... }

    // Helper method to initialize Google Sheets FAQ module
    async initializeGoogleSheetsFAQ() {
        try {
            log(`–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets FAQ –∏–∑ Telegram –±–æ—Ç–∞`, 'c');
            
            // Validate required settings
            if (!global.settings || !global.settings.googleSheetsId || !global.settings.googleSheetsServiceAccountPath) {
                log(`–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Google Sheets (ID –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)`, 'r');
                return false;
            }
            
            if (!global.googlesheets || !global.googlesheets.default) {
                log(`–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å googlesheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`, 'r');
                return false;
            }
            
            const GoogleSheetsFAQ = global.googlesheets.default;
            global.googleSheetsFAQ = new GoogleSheetsFAQ(
                global.settings.googleSheetsId,
                global.settings.googleSheetsServiceAccountPath,
                global.settings.googleSheetsRange || 'FAQ!A:B',
                global.settings.googleSheetsGeminiApiKey || null,
                global.settings.googleSheetsFeedbackSheetName || 'Feedback',
                global.settings.googleSheetsContextSheetName || 'Context'
            );
            
            log(`–≠–∫–∑–µ–º–ø–ª—è—Ä GoogleSheetsFAQ —Å–æ–∑–¥–∞–Ω –∏–∑ Telegram –±–æ—Ç–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö FAQ`, 'c');
            
            // Load FAQ data
            const faqLoaded = await global.googleSheetsFAQ.refreshFAQData();
            if (!faqLoaded) {
                log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets FAQ.`, 'r');
                return false;
            } else {
                log(`Google Sheets FAQ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ Telegram –±–æ—Ç–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${global.googleSheetsFAQ.getFAQData().length} –∑–∞–ø–∏—Å–µ–π.`, 'g');
                return true;
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets FAQ –∏–∑ Telegram –±–æ—Ç–∞: ${err}`, 'r');
            return false;
        }
    }

    // Handle callback queries from inline buttons for pending responses
    async onCallbackQuery(ctx) {
        try {
            const callbackData = ctx.callbackQuery.data;
            
            if(callbackData.startsWith('/reply_')) {
                await this.startReplyToUser(ctx, callbackData);
            }
            else if(callbackData.startsWith('pause_')) {
                await this.handleInlinePauseButton(ctx, callbackData);
            }
            // Handle approve/reject/edit callbacks for pending responses
            else if(callbackData.startsWith('approve_')) {
                await this.handleApproveResponse(ctx, callbackData);
            }
            else if(callbackData.startsWith('reject_')) {
                await this.handleRejectResponse(ctx, callbackData);
            }
            else if(callbackData.startsWith('edit_')) {
                await this.handleEditResponse(ctx, callbackData);
            }
            else if(callbackData === 'noop') {
                // Do nothing, just acknowledge the callback
                ctx.answerCbQuery();
            }
            
            // Answer callback query to remove loading state
            ctx.answerCbQuery();
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: ${err}`, 'r');
            ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }
    
    // Handle approve response callback
    async handleApproveResponse(ctx, callbackData) {
        try {
            const questionId = callbackData.substring(8); // Remove 'approve_' prefix
            
            if (!global.googleSheetsFAQ) {
                ctx.answerCbQuery('‚ùå –ú–æ–¥—É–ª—å Google Sheets FAQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }
            
            // Get the pending response to retrieve the AI answer
            const pendingResponses = global.googleSheetsFAQ.getPendingResponses();
            const pendingResponse = pendingResponses.find(p => p.id === questionId);
            
            if (!pendingResponse) {
                ctx.answerCbQuery('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // Approve with the AI answer by default
            const aiAnswer = pendingResponse.aiAnswer;
            await global.googleSheetsFAQ.updatePendingResponseStatus(questionId, 'approved', aiAnswer);
            
            ctx.answerCbQuery(`‚úÖ –û—Ç–≤–µ—Ç —Å ID ${questionId} –æ–¥–æ–±—Ä–µ–Ω —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò`);
            
            // Update the message to show it was approved
            const message = `üì¨ –û–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n` +
                           `üÜî ID: <code>${questionId}</code>\n` +
                           `‚ùì –í–æ–ø—Ä–æ—Å: <b>${pendingResponse.question}</b>\n` +
                           `ü§ñ –û—Ç–≤–µ—Ç –ò–ò: <i>${aiAnswer}</i>\n\n` +
                           `‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω</b>`;
                           
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', callback_data: 'noop' }
                        ]
                    ]
                }
            });
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${err}`, 'r');
            ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è');
        }
    }
    
    // Handle reject response callback
    async handleRejectResponse(ctx, callbackData) {
        try {
            const questionId = callbackData.substring(7); // Remove 'reject_' prefix
            
            if (!global.googleSheetsFAQ) {
                ctx.answerCbQuery('‚ùå –ú–æ–¥—É–ª—å Google Sheets FAQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }
            
            // Get the pending response for displaying in the message
            const pendingResponses = global.googleSheetsFAQ.getPendingResponses();
            const pendingResponse = pendingResponses.find(p => p.id === questionId);
            
            if (!pendingResponse) {
                ctx.answerCbQuery('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // Reject without requiring a new answer
            await global.googleSheetsFAQ.updatePendingResponseStatus(questionId, 'rejected');
            
            ctx.answerCbQuery(`‚úÖ –û—Ç–≤–µ—Ç —Å ID ${questionId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
            
            // Update the message to show it was rejected
            const message = `üì¨ –û–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n` +
                           `üÜî ID: <code>${questionId}</code>\n` +
                           `‚ùì –í–æ–ø—Ä–æ—Å: <b>${pendingResponse.question}</b>\n` +
                           `ü§ñ –û—Ç–≤–µ—Ç –ò–ò: <i>${pendingResponse.aiAnswer}</i>\n\n` +
                           `‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω</b>`;
                           
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_data: 'noop' }
                        ]
                    ]
                }
            });
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${err}`, 'r');
            ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        }
    }
    
    // Handle edit response callback
    async handleEditResponse(ctx, callbackData) {
        try {
            const questionId = callbackData.substring(5); // Remove 'edit_' prefix
            
            if (!global.googleSheetsFAQ) {
                ctx.answerCbQuery('‚ùå –ú–æ–¥—É–ª—å Google Sheets FAQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }
            
            // Ask for the correct answer
            let message = `‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å ID: <code>${questionId}</code>\n\n`;
            message += '–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.';
            
            this.pendingFeedbackAction = {
                type: 'edit',
                questionId: questionId
            };
            this.waitingForFeedbackAction = true;
            
            // Answer the callback query first
            ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
            
            // Send message with cancel keyboard
            const cancelKeyboard = {
                keyboard: [[
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }
                ]],
                resize_keyboard: true,
                one_time_keyboard: true
            };
            
            await ctx.replyWithHTML(message, {
                reply_markup: cancelKeyboard
            });
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${err}`, 'r');
            ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
    }
    
    uploadSettingsFile(ctx) {
        this.waitingForSettingsFile = true;
        ctx.reply(`–û–∫–µ–π, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ settings.txt.`, this.backKeyboard.reply());
    }
    
    async onUploadSettingsFile(ctx) {
        let file = ctx.update.message.document;
        let file_id = file.file_id;
        let file_name = file.file_name;
        let contents = null;

        this.waitingForSettingsFile = false;

        if(file_name != 'settings.txt') {
            ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è settings.txt`, this.editSettingsKeyboard.reply());
            return;
        }

        try {
            ctx.reply(`‚ôªÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...`);
            
            log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${file_name}, file_id: ${file_id}`, 'c');
            
            // Use Telegraf's built-in file downloading capability with the working approach
            try {
                // Get file info first
                const fileInfo = await this.bot.telegram.getFile(file_id);
                log(`–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${JSON.stringify(fileInfo)}`, 'g');
                
                // Use Telegraf's internal method to download the file
                const fileUrl = `https://api.telegram.org/file/bot${this.bot.token}/${fileInfo.file_path}`;
                
                // Use the working approach with Telegram-Bot-SDK User-Agent
                const fetchOptions = {
                    method: 'GET',
                    headers: {
                        'User-Agent': 'Telegram-Bot-SDK/1.0'
                    }
                };
                
                log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ URL: ${fileUrl}`, 'c');
                
                const response = await fetch(fileUrl, fetchOptions);
                log(`–û—Ç–≤–µ—Ç –æ—Ç Telegram API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${response.status} ${response.statusText}`, 'c');
                
                if (!response.ok) {
                    throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
                }
                
                contents = await response.text();
                log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–ª–∏–Ω–∞: ${contents.length}`, 'g');
            } catch (fetchError) {
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ Telegram: ${fetchError}`, 'r');
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ Telegram: ${fetchError.message}`);
            }

            ctx.reply(`‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å...`);

            // Write the new settings file
            const fs = global.fs_extra;
            await fs.writeFile('./settings.txt', contents);
            
            ctx.reply(`‚úÖ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.`, {
                parse_mode: 'HTML',
                ...this.editSettingsKeyboard.reply()
            });
            log(`–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram`, 'g');
        } catch(e) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e}`, 'r');
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}`, this.editSettingsKeyboard.reply());
        }
    }
    
    async editAutoResponse(ctx) {
        const msg = `ü§ñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤</b> ü§ñ\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –±–æ—Ç–∞.`;
        await ctx.replyWithHTML(msg, this.editAutoResponseKeyboard.reply());
    }
    
    addAutoResponse(ctx) {
        ctx.replyWithHTML(
            `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n–ü—Ä–∏–º–µ—Ä:\n–ø—Ä–∏–≤–µ—Ç\n–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n–¥–æ–±—Ä—ã–π –¥–µ–Ω—å`,
            this.backKeyboard.reply()
        );
        this.waitingForAutoResponsePatterns = true;
    }
    
    async saveAutoResponsePatterns(ctx) {
        const msg = ctx.update.message.text;
        this.currentAutoResponse.patterns = msg.split('\n').map(p => p.trim()).filter(p => p.length > 0);
        this.waitingForAutoResponsePatterns = false;
        
        ctx.replyWithHTML(
            `‚úì –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: <code>${this.currentAutoResponse.patterns.join(', ')}</code>\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).`,
            this.backKeyboard.reply()
        );
        this.waitingForAutoResponseResponses = true;
    }
    
    async saveAutoResponseResponses(ctx) {
        const msg = ctx.update.message.text;
        this.currentAutoResponse.responses = msg.split('\n').map(r => r.trim()).filter(r => r.length > 0);
        this.waitingForAutoResponseResponses = false;
        
        try {
            const autoResponses = await load('data/configs/autoResponse.json');
            autoResponses.push({
                patterns: this.currentAutoResponse.patterns,
                responses: this.currentAutoResponse.responses
            });
            await updateFile(autoResponses, 'data/configs/autoResponse.json');
            
            this.currentAutoResponse = { patterns: [], responses: [] };
            ctx.replyWithHTML(`‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, this.editAutoResponseKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞.`, this.editAutoResponseKeyboard.reply());
        }
    }
    
    async viewAllAutoResponses(ctx) {
        try {
            const autoResponses = await load('data/configs/autoResponse.json');
            
            if(!autoResponses || autoResponses.length === 0) {
                ctx.replyWithHTML(`üìÑ <b>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤</b>\n\n–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`, this.editAutoResponseKeyboard.reply());
                return;
            }
            
            let msg = `üìÑ <b>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤</b> (–≤—Å–µ–≥–æ: ${autoResponses.length})\n\n`;
            
            for(let i = 0; i < Math.min(autoResponses.length, 10); i++) {
                const ar = autoResponses[i];
                const patterns = ar.patterns ? ar.patterns.slice(0, 3).join(', ') : '–Ω–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤';
                const responses = ar.responses ? `${ar.responses.length} –æ—Ç–≤–µ—Ç–æ–≤` : '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤';
                
                msg += `<b>[${i + 1}]</b> –ü–∞—Ç—Ç–µ—Ä–Ω—ã: <code>${patterns}</code>\n     –û—Ç–≤–µ—Ç—ã: ${responses}\n\n`;
            }
                
            if(autoResponses.length > 10) {
                msg += `... –∏ –µ—â—ë ${autoResponses.length - 10} –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤.\n\n`;
            }
            
            ctx.replyWithHTML(msg, this.editAutoResponseKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.`, this.editAutoResponseKeyboard.reply());
        }
    }
    
    removeAutoResponse(ctx) {
        ctx.replyWithHTML(`‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞.`, this.backKeyboard.reply());
        this.waitingForAutoResponseDelete = true;
    }
    
    async deleteAutoResponse(ctx) {
        const msg = ctx.update.message.text;
        this.waitingForAutoResponseDelete = false;
        
        const num = Number(msg);
        if(isNaN(num)) {
            ctx.replyWithHTML(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.`, this.editAutoResponseKeyboard.reply());
            return;
        }
        
        try {
            const autoResponses = await load('data/configs/autoResponse.json');
            if(num < 1 || num > autoResponses.length) {
                ctx.replyWithHTML(`‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`, this.editAutoResponseKeyboard.reply());
                return;
            }
            
            autoResponses.splice(num - 1, 1);
            await updateFile(autoResponses, 'data/configs/autoResponse.json');
            ctx.replyWithHTML(`‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É–¥–∞–ª—ë–Ω!`, this.editAutoResponseKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.`, this.editAutoResponseKeyboard.reply());
        }
    }
    
    async getAutoResponseFile(ctx) {
        try {
            ctx.replyWithDocument({
                source: 'data/configs/autoResponse.json',
                filename: 'autoResponse.json'
            }).catch(() => {
                ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.`, this.editAutoResponseKeyboard.reply());
            });
        } catch (err) {
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞.`, this.editAutoResponseKeyboard.reply());
        }
    }
    
    uploadAutoResponseFile(ctx) {
        this.waitingForAutoResponseFile = true;
        ctx.replyWithHTML(`‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª JSON.`, this.backKeyboard.reply());
    }
    
    async onUploadAutoResponseFile(ctx) {
        let file = ctx.update.message.document;
        this.waitingForAutoResponseFile = false;
        
        if(!file || !file.file_name.endsWith('.json')) {
            ctx.replyWithHTML(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.`, this.editAutoResponseKeyboard.reply());
            return;
        }
        
        try {
            ctx.replyWithHTML('‚ôªÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...');
            
            log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${file.file_name}, file_id: ${file.file_id}`, 'c');
            
            // Use Telegraf's built-in file downloading capability with the working approach
            let contents;
            try {
                // Get file info first
                const fileInfo = await this.bot.telegram.getFile(file.file_id);
                log(`–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: ${JSON.stringify(fileInfo)}`, 'g');
                
                // Use Telegraf's internal method to download the file
                const fileUrl = `https://api.telegram.org/file/bot${this.bot.token}/${fileInfo.file_path}`;
                
                // Use the working approach with Telegram-Bot-SDK User-Agent
                const fetchOptions = {
                    method: 'GET',
                    headers: {
                        'User-Agent': 'Telegram-Bot-SDK/1.0'
                    }
                };
                
                log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ URL: ${fileUrl}`, 'c');
                
                const response = await fetch(fileUrl, fetchOptions);
                log(`–û—Ç–≤–µ—Ç –æ—Ç Telegram API: ${response.status} ${response.statusText}`, 'c');
                
                if (!response.ok) {
                    throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
                }
                
                contents = await response.text();
                log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–ª–∏–Ω–∞: ${contents.length}`, 'g');
                log(`–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${contents.substring(0, 200)}`, 'c');
            } catch (fetchError) {
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram: ${fetchError}`, 'r');
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram: ${fetchError.message}`);
            }
            
            // Parse JSON
            let json;
            try {
                json = JSON.parse(contents);
                log(`JSON —Ä–∞–∑–æ–±—Ä–∞–Ω, —Ç–∏–ø: ${typeof json}`, 'g');
            } catch (parseError) {
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: ${parseError}`, 'r');
                log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: ${contents}`, 'r');
                throw new Error(`–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π JSON: ${parseError.message}`);
            }
            
            // Check if it's an array
            if(!Array.isArray(json)) {
                log(`–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –¢–∏–ø: ${typeof json}, –ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(json).substring(0, 200)}`, 'r');
                throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤');
            }
            
            await updateFile(json, 'data/configs/autoResponse.json');
            
            // Reload autoRespData in chat module
            try {
                const { reloadAutoResponseData } = global.chat;
                if (reloadAutoResponseData && typeof reloadAutoResponseData === 'function') {
                    await reloadAutoResponseData();
                }
            } catch (reloadErr) {
                log(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤: ${reloadErr}`, 'r');
            }
            
            ctx.replyWithHTML(`‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${json.length} –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤`, this.editAutoResponseKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${err}`, 'r');
            ctx.replyWithHTML(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${err.message}`, this.editAutoResponseKeyboard.reply());
        }
    }

    
    // Handle inline pause button click
    async handleInlinePauseButton(ctx, callbackData) {
        try {
            // Parse callback data: "pause_{username}_{minutes}"
            const parts = callbackData.split('_');
            if(parts.length < 3) {
                ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã');
                return;
            }
            
            const targetUser = parts[1];
            const minutes = parseInt(parts[2]) || 10;
            
            const { pauseAutoResponseForUser, isUserPaused, getRemainingPauseTime } = global.chat;
            
            // Check if user is already paused
            if(isUserPaused(targetUser)) {
                const remainingMinutes = getRemainingPauseTime(targetUser);
                ctx.answerCbQuery(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser} —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingMinutes} –º–∏–Ω.)`);
                return;
            }
            
            // Pause the user
            pauseAutoResponseForUser(targetUser, minutes);
            
            // Send confirmation message
            ctx.answerCbQuery(`‚è≤Ô∏è –ü–∞—É–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${targetUser} –Ω–∞ ${minutes} –º–∏–Ω.`);
            
            // Also send a message to show the action was successful
            const confirmationMsg = `‚è∏Ô∏è <b>–ü–∞—É–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n` +
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${targetUser}</code>\n` +
                `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>${minutes} –º–∏–Ω—É—Ç</b>\n\n` +
                `–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n` +
                `üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unpause ${targetUser} –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`;
            
            const chatId = this.getChatID();
            if(chatId) {
                this.bot.telegram.sendMessage(chatId, confirmationMsg, {
                    parse_mode: 'HTML'
                });
            }
            
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã: ${err}`, 'r');
            ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—É–∑—ã');
        }
    }
}

export default TelegramBot;